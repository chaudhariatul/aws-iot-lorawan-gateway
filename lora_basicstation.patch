diff --git a/examples/corecell/reset_lgw.sh b/examples/corecell/reset_lgw.sh
index 0136d72..59b01c2 100755
--- a/examples/corecell/reset_lgw.sh
+++ b/examples/corecell/reset_lgw.sh
@@ -1,65 +1,55 @@
 #!/bin/sh
 
-# This script is intended to be used on SX1302 CoreCell platform, it performs
-# the following actions:
-#       - export/unpexort GPIO23 and GPIO18 used to reset the SX1302 chip and to enable the LDOs
-#
-# Usage examples:
-#       ./reset_lgw.sh stop
-#       ./reset_lgw.sh start
+# Refer https://github.com/Lora-net/sx1302_hal.git for more details.
+# This script will configure GPIO pins on Raspberry Pi with Bookworm OS by using pinctrl commands.
 
-# GPIO mapping has to be adapted with HW
-#
 
-SX1302_RESET_PIN=23
+# Use these settings when using RakWireless Rak2287
+# SX1302_RESET_PIN=25
+
+# Use these settings when using the Seeedstudio SX1302 module
+SX1302_RESET_PIN=17
+
 SX1302_POWER_EN_PIN=18
+SX1261_RESET_PIN=5
+AD5338R_RESET_PIN=13
+
 
 WAIT_GPIO() {
     sleep 0.1
 }
 
 init() {
-    # setup GPIOs
-    echo "$SX1302_RESET_PIN" > /sys/class/gpio/export; WAIT_GPIO
-    echo "$SX1302_POWER_EN_PIN" > /sys/class/gpio/export; WAIT_GPIO
-
     # set GPIOs as output
-    echo "out" > /sys/class/gpio/gpio$SX1302_RESET_PIN/direction; WAIT_GPIO
-    echo "out" > /sys/class/gpio/gpio$SX1302_POWER_EN_PIN/direction; WAIT_GPIO
+	pinctrl set $SX1302_RESET_PIN op; WAIT_GPIO
+	pinctrl set $SX1302_POWER_EN_PIN op; WAIT_GPIO
+	pinctrl set $SX1261_RESET_PIN op; WAIT_GPIO
+	pinctrl set $AD5338R_RESET_PIN op; WAIT_GPIO
 }
 
 reset() {
     echo "CoreCell reset through GPIO$SX1302_RESET_PIN..."
+    echo "SX1261 reset through GPIO$SX1302_RESET_PIN..."
     echo "CoreCell power enable through GPIO$SX1302_POWER_EN_PIN..."
+    echo "CoreCell ADC reset through GPIO$AD5338R_RESET_PIN..."
 
     # write output for SX1302 CoreCell power_enable and reset
-    echo "1" > /sys/class/gpio/gpio$SX1302_POWER_EN_PIN/value; WAIT_GPIO
-
-    echo "1" > /sys/class/gpio/gpio$SX1302_RESET_PIN/value; WAIT_GPIO
-    echo "0" > /sys/class/gpio/gpio$SX1302_RESET_PIN/value; WAIT_GPIO
-}
+	pinctrl set $SX1302_RESET_PIN op; WAIT_GPIO
+	pinctrl set $SX1302_RESET_PIN op dh; WAIT_GPIO
+	pinctrl set $SX1302_RESET_PIN op dl; WAIT_GPIO
 
-term() {
-    # cleanup all GPIOs
-    if [ -d /sys/class/gpio/gpio$SX1302_RESET_PIN ]
-    then
-        echo "$SX1302_RESET_PIN" > /sys/class/gpio/unexport; WAIT_GPIO
-    fi
-    if [ -d /sys/class/gpio/gpio$SX1302_POWER_EN_PIN ]
-    then
-        echo "$SX1302_POWER_EN_PIN" > /sys/class/gpio/unexport; WAIT_GPIO
-    fi
+    pinctrl set $SX1261_RESET_PIN op; WAIT_GPIO
+	pinctrl set $SX1261_RESET_PIN op dl; WAIT_GPIO
+	pinctrl set $SX1261_RESET_PIN op dh; WAIT_GPIO
 }
 
 case "$1" in
     start)
-    term # just in case
     init
     reset
     ;;
     stop)
     reset
-    term
     ;;
     *)
     echo "Usage: $0 {start|stop}"
diff --git a/setup.gmk b/setup.gmk
index d7c4363..d5cb16f 100644
--- a/setup.gmk
+++ b/setup.gmk
@@ -43,8 +43,8 @@ LOCAL_ARCH := $(shell gcc -dumpmachine)
 ARCH.linux   = x86_64-linux-gnu
 ARCH.linuxV2 = x86_64-linux-gnu
 ARCH.linuxpico = x86_64-linux-gnu
-ARCH.corecell  = arm-linux-gnueabihf
-ARCH.rpi     = arm-linux-gnueabihf
+ARCH.corecell  = aarch64-linux-gnu
+ARCH.rpi     = aarch64-linux-gnu
 ARCH.kerlink = arm-klk-linux-gnueabi
 ARCH=${ARCH.${platform}}
 
@@ -81,7 +81,7 @@ endif
 BD=build-${platform}-${variant}
 
 # -- Architecture specific
-CFG.arm-linux-gnueabihf = linux
+CFG.aarch64-linux-gnu = linux
 # CFG.x86_64-linux-gnu    = linux
 
 # -- Variant specific
